// This shows how to use a 'pseudo-metavar' to invert the binary add function,
// and solve the equation: 'X + 1234560 = 1234567'. Run it with collapse mode:
// $ hvml run pseudo_metavar_nat.hvml -C -s

data Bin { #O{pred} #I{pred} #E }

// If-Then-Else
@if(b t f) = ~b {
  0: f
  k: t
}

// Converts a Bin to an U32
@u32(b) = ~b{
  #O: λp (+ (* 2 @u32(p)) 0)
  #I: λp (+ (* 2 @u32(p)) 1)
  #E: 0
}

// Converts an U32 to a Bin of given size
@bin(s n) = ~s{
  0: #E
  p: !&0{n0 n1}=n ~(% n0 2) {
    0: #O{@bin(p (/ n1 2))}
    k: #I{@bin(p (/ n1 2))}
  }
}

// Bin Equality
@eq(a b) = ~a{
  #E: ~b { #O: λ_ 0 #I: λ_ 0 #E: 1 }
  #O: λap ~b{ #O: λbp @eq(ap bp) #I: λ_ 0 #E: 0 }
  #I: λap ~b{ #O: λ_ 0 #I: λbp @eq(ap bp) #E: 0 }
}

// Increments a Bin
@inc(a) = ~a{
  #O: λp #I{p}
  #I: λp #O{@inc(p)}
  #E: #E
}

// Adds two Bins
@add(a b) = ~a {
  #O: λap ~b {
    #O: λbp #O{@add(ap bp)}
    #I: λbp #I{@add(ap bp)}
    #E: #E
  }
  #I: λap ~b {
    #O: λbp #I{@add(ap bp)}
    #I: λbp #O{@inc(@add(ap bp))}
    #E: #E
  }
  #E: #E
}

// Enumerates all Bins of given size
@all(s) = ~s{
  0: #E
  p: !&0{p0 p1}=p &0{#O{@all(p0)} #I{@all(p1)}}
}

@S = 64
@X = @all(@S)

@main =
  ! ok = @eq(@add(@X @bin(@S 1234560)) @bin(@S 1234567))
  @if(ok @u32(@X) *)
